#!/bin/bash

. $(dirname $0)/prelude.bash
cd $ORIG_PWD

enforce_svn_root

repo=$(basename $(pwd))
mkdir -p $ARCHIVE_DIR/$repo

# These have so many redundant files (usually from recursively nested tags) that they're effectively zip bombs
bombs='all-in-one-contact-buttons-wpshare247|biblesupersearch'

# These produce errors when svn attempts to update them
corrupt='a2-optimized-wp|better-links|countdown-timer'

# Many popular plugins are simply too big to work with the whole tree, so only get the trunk of these
# note how many have "lite" in the name üôÑ
huge=$(echo '
  advanced-custom-fields
  all-in-one-seo-pack
  all-in-one-wp-security-and-firewall
  astra-sites
  better-wp-security
  duplicator
  elementor
  elementskit-lite
  essential-addons-for-elementor-lite
  ewww-image-optimizer
  forminator
  google-analytics-dashboard-for-wp
  google-analytics-for-wordpress
  google-listings-and-ads
  google-site-kit
  gtranslate
  gutenberg
  happy-elementor-addons
  host-webfonts-local
  jeg-elementor-kit
  jetpack
  jetpack-boost
  kadence-blocks
  mailchimp-for-wp
  mailpoet
  meta-box
  newsletter
  ninja-forms
  optinmonster
  otter-blocks
  photo-gallery
  pixelyoursite
  polylang
  popup-maker
  post-smtp
  premium-addons-for-elementor
  redux-framework
  royal-elementor-addons
  seo-by-rank-math
  shortcodes-ultimate
  shortpixel-image-optimiser
  smart-slider-3
  so-widgets-bundle
  the-events-calendar
  translatepress-multilingual
  ultimate-addons-for-gutenberg
  ultimate-member
  under-construction-page
  unlimited-elements-for-elementor
  updraftplus
  w3-total-cache
  woo-variation-swatches
  woocommerce
  woocommerce-gateway-stripe
  woocommerce-google-analytics-integration
  woocommerce-payments
  woocommerce-paypal-payments
  woocommerce-pdf-invoices-packing-slips
  woocommerce-services
  wordfence
  wordpress-seo
  wp-fastest-cache
  wp-google-maps
  wp-mail-smtp
  wp-optimize
  wp-seopress
  wp-smushit
  wp-statistics
  wp-user-avatar
  wp-whatsapp-chat
  wpforms-lite
  wpvivid-backuprestore
  yith-woocommerce-compare
  yith-woocommerce-wishlist
' | xargs | sed 's/ /|/g')

TRUNK_ONLY=${TRUNK_ONLY:-$huge}

# combined blacklist
blacklist="^($bombs|$corrupt)\$"

function main() {
  for dir in $*
  do
    process $dir
  done
}

function process() {
  local dir=$1

  echo -e "\n---------- $dir ----------"
  is_trunk_only $dir && warn "WARNING: $dir marked as a trunk-only build"

  if ! [[ $dir =~ ^[-_A-Za-z0-9]+$ ]]; then
    finalize $dir "malformed dir ignored"
    return
  fi

  if [[ $dir =~ $blacklist ]]; then
    finalize $dir "blacklisted dir skipped"
    return
  fi

  local suffix=''
  is_trunk_only $dir && suffix='__trunk'

  local rev=$(svn info -r HEAD --show-item last-changed-revision $dir)
  local tar=$ARCHIVE_DIR/$repo/$rev/$rev.$dir$suffix.tar
  local ztar=$tar.lrz
  mkdir -p $(dirname $tar)

  if [[ -f $ztar ]]; then
    finalize $dir "archive exists at revision $rev"
    return
  fi

  update $dir
  archive $dir $tar
  ls -lh $ztar
  finalize $dir "archived at revision $rev"
}

function update() {
  local dir=$1

  # sometimes it fails to find the trunk directory without checking out the parent first ü§∑‚Äç‚ôÇÔ∏è
  is_trunk_only $dir && { svn update --ignore-externals --set-depth=empty $dir; dir="$dir/trunk"; }
  svn update --ignore-externals --set-depth=infinity --force $dir
}

function archive() {
  local dir=$1
  local tar=$2

  rm -f $ARCHIVE_DIR/$repo/*.$dir.tar*

  # could be one step, but I like seeing the progress
  tar cf $tar ./$dir
  lrzip --delete $tar
}

function finalize() {
  local dir=$1
  local message=$2

  warn "$dir: $message"
  [[ -n $KEEP_DIRS ]] || rm -rf "$dir"
}

function is_trunk_only() {
  local dir=$1
  if [[ -n $UPDATE_FORCE_TRUNK_ONLY ]]; then
    return
  fi
  [[ -n $UPDATE_FORCE_FULL_CHECKOUT ]] || [[ $dir =~ ^($TRUNK_ONLY)$ ]]
}

main $*
