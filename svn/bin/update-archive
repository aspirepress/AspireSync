#!/bin/bash

. $(dirname $0)/prelude.bash
cd $ORIG_PWD

enforce_svn_root

repo=$(basename $(pwd))
mkdir -p $ARCHIVE_DIR/$repo

# These have so many redundant files (usually from recursively nested tags) that they're effectively zip bombs
bombs='all-in-one-contact-buttons-wpshare247|biblesupersearch'

# These produce errors when svn attempts to update them
corrupt='a2-optimized-wp|better-links|countdown-timer|facebook-album-sync|font-awesome-the-easy-way'

# combined blacklist
blacklist="^($bombs|$corrupt)\$"

trunk_only_file=$(dirname $0)/trunk-only.txt

function main() {
  for dir in $*
  do
    process $dir
  done
}

function process() {
  local dir=$1

  depth=full
  is_trunk_only $dir && depth=trunk

  echo -e "\n---------- $dir [$depth] ----------"

  if ! [[ $dir =~ ^[-_A-Za-z0-9]+$ ]]; then
    finalize $dir "malformed dir ignored"
    return
  fi

  if [[ $dir =~ $blacklist ]]; then
    finalize $dir "blacklisted dir skipped"
    return
  fi

  [[ -d $dir ]] || svn update --ignore-externals --depth=immediates $dir

  local suffix=$(dir_suffix $dir)

  local rev=$(svn info -r HEAD --show-item last-changed-revision $dir)
  local tar=$ARCHIVE_DIR/$repo/$rev/$rev.$dir$suffix.tar
  local ztar=$tar.lrz
  mkdir -p $(dirname $tar)

  if [[ -f $ztar ]]; then
    finalize $dir "archive exists at revision $rev"
    return
  fi

  update $dir
  archive $dir $tar
  ls -lh $ztar
  finalize $dir "archived at revision $rev"
}

function update() {
  local dir=$1
  is_trunk_only $dir && dir="$dir/trunk"
  svn update --ignore-externals --set-depth=infinity --force $dir
}

function archive() {
  local dir=$1
  local tar=$2

  rm -f $ARCHIVE_DIR/$repo/*.$dir.tar*

  # could be one step, but I like seeing the progress
  tar cf $tar ./$dir
  lrzip --delete $tar
}

function finalize() {
  local dir=$1
  local message=$2

  warn "$dir: $message"
  [[ -n $KEEP_DIRS ]] || rm -rf "$dir"
}

function is_trunk_only() {
  local dir=$1
  if [[ -n $UPDATE_FORCE_TRUNK_ONLY ]]; then
    return
  fi
  if [[ -n $UPDATE_FORCE_FULL_CHECKOUT ]]; then
    false
  else
    grep -q "^$dir\$" $trunk_only_file
  fi
}

function dir_suffix() {
  local dir=$1
  suffix=''
  is_trunk_only $dir && suffix='__trunk'
  echo $suffix
}

main $*

